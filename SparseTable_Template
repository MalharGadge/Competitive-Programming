template <typename T>
struct SparseTable {
    int n, LOG;
    vector<int> binlog;
    vector<vector<T>> st;

    SparseTable(const vector<T>& data) {
        n = data.size();
        LOG = log2(n) + 1;
        binlog.resize(n + 1);
        binlog[1] = 0;
        
        for (int i = 2; i <= n; i++) {
            binlog[i] = binlog[i >> 1] + 1;
        }

        st.assign(n, vector<T>(LOG));
        for (int i = 0; i < n; i++) {
            st[i][0] = data[i];
        }

        for (int j = 1; j < LOG; j++) {
            for (int i = 0; i + (1 << j) <= n; i++) {
                st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
            }
        }
    }

    T query(int l, int r) {
        int len = r - l + 1;
        int j = binlog[len];
        return min(st[l][j], st[r - (1 << j) + 1][j]);
    }
};
