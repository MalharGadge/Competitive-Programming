class Node{
    public:
        Node* links[26];
        bool isEnd = false;
};

class Trie {
public:
    Node* root;

    Trie() {
        root = new Node();
    }
    
    void insert(string word) {
        Node* curr = root;
        for(int i=0;i<word.size();i++){
            int j = word[i]-'a';
            if(curr->links[j] != NULL) curr = curr->links[j];
            else{
                Node* temp = new Node();
                curr->links[j] = temp;
                curr = temp;
            }
        }
        curr->isEnd = true;
    }
    
    bool search(string word) {
        Node* curr = root;
        for(int i=0;i<word.size();i++){
            int j = word[i]-'a';
            if(curr->links[j] == NULL) return false;
            else curr = curr->links[j];
        }
        if(curr->isEnd == true) return true;
        else return false;
    }
    
    bool givenThePrefixisEntireStringPresent(string prefix) {
        Node* curr = root;
        for(int i=0;i<prefix.size();i++){
            int j = prefix[i]-'a';
            if(curr->links[j] != NULL) curr = curr->links[j];
            else return false;
        }
        return true;
    }
};
