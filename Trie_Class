// a to z
struct Trie {
   int cur;
   vector<vector<int>> tree;
   vector<int> isEnd;
   
   Trie() {
      cur = 1;
      tree.clear(); 
      tree.resize(1, vector<int> (26, -1));
      isEnd.clear();
      isEnd.push_back(0);
   }

   void insertString(string s) {
        int head = 0;
        for (char c : s) {
            int ch = c - 'a';
            if (tree[head][ch] == -1) {
                tree[head][ch] = cur;
                tree.push_back(vector<int>(26, -1));
                isEnd.push_back(0); 
                head = cur++;
            } else {
                head = tree[head][ch];
            }
        }
        isEnd[head] = 1;
   }

    pair<int,int> maxPrefixMatch(string s) { // max prefix match
        int res = 0, head = 0;
        for (char c : s) {
            int ch = c - 'a';
            if (tree[head][ch] == -1) {
                break;
            }
            res++;
            head = tree[head][ch];
        }
        return {res, isEnd[head]};
    }

    
    bool search(string word) { // is word present in the trie
        auto [len, is] = maxPrefixMatch(word);
        return (len == word.size() and is == 1);
    }   
    
    bool startsWith(string prefix) { // do any string in the trie has 'prefix' as prefix
        return maxPrefixMatch(prefix).first == prefix.size();
    }

};
