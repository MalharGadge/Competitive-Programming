
struct TwoSAT {
    int N;
    vector<vector<ll>> g, gr;
    vector<ll> comp, order;
    vector<bool> used;
    TwoSAT(int n): N(n), g(2*n), gr(2*n), comp(2*n), used(2*n) {}

    void addImp(ll u, ll v) {
        g[u].pb(v);
        gr[v].pb(u);
    }
    void addClause(ll u, ll v) {
        addImp(u^1, v);
        addImp(v^1, u);
    }
    void dfs1(ll v) {
        used[v] = 1;
        for (ll to : g[v]) if (!used[to]) dfs1(to);
        order.pb(v);
    }
    void dfs2(ll v, ll cl) {
        comp[v] = cl;
        for (ll to : gr[v]) if (comp[to] == -1) dfs2(to, cl);
    }
    bool solve() {
        order.clear();
        fill(used.begin(), used.end(), 0);
        for (ll i = 0; i < 2*N; i++) if (!used[i]) dfs1(i);
        fill(comp.begin(), comp.end(), -1);
        ll j = 0;
        for (ll i = (ll)order.size() - 1; i >= 0; i--) {
            ll v = order[i];
            if (comp[v] == -1) dfs2(v, j++);
        }
        for (ll i = 0; i < N; i++) {
            if (comp[2*i] == comp[2*i^1]) return false;
        }
        return true;
    }
};

void solve() {
    ll n; cin >> n;
    vector g(3, vector<ll>(n));

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < n; j++)
            cin >> g[i][j];

    TwoSAT ts(n);

    for (int j = 0; j < n; j++) {
        ll l[3];

        for (int i = 0; i < 3; i++) {
            int x = g[i][j];
            if (x > 0) l[i] = 2*(x-1);
            else l[i] = 2*((-x)-1) + 1;
        }

        ts.addClause(l[0], l[1]);
        ts.addClause(l[0], l[2]);
        ts.addClause(l[1], l[2]);
    }

    cout << (ts.solve() ? "YES" : "NO") << endl;
}


